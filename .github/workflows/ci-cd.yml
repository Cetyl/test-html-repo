name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Build Docker image
      run: |
        docker build -t my-web-app .

    - name: Authenticate Docker to ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 730335620727.dkr.ecr.us-east-1.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag my-web-app:latest 730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest

    - name: Push Docker image to ECR
      run: |
        docker push 730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest

    - name: Create ECS Cluster (if not exists)
      run: |
        aws ecs describe-clusters --clusters ${{ secrets.ECS_CLUSTER_NAME }} || aws ecs create-cluster --cluster-name ${{ secrets.ECS_CLUSTER_NAME }}

    - name: Register ECS Task Definition
      run: |
        aws ecs register-task-definition \
          --family my-task-definition \
          --container-definitions '[
            {
              "name": "my-container",
              "image": "730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest",
              "memory": 512,
              "cpu": 256,
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80
                }
              ]
            }
          ]'

    - name: Create ECS Service (if not exists)
      run: |
        aws ecs describe-services --services ${{ secrets.ECS_SERVICE_NAME }} --cluster ${{ secrets.ECS_CLUSTER_NAME }} || \
        aws ecs create-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service-name ${{ secrets.ECS_SERVICE_NAME }} \
          --task-definition my-task-definition \
          --desired-count 1 \
          --launch-type FARGATE

    - name: Update ECS Service
      run: |
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment

    - name: Clean up Docker images (optional)
      run: |
        docker system prune -af
