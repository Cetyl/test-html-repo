name: Deploy to ECS

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create ECR Repository (if not exists)
      run: |
        aws ecr describe-repositories --repository-names my-web-app || aws ecr create-repository --repository-name my-web-app

    - name: Build Docker image
      run: |
        docker build -t my-web-app .

    - name: Authenticate Docker to ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 730335620727.dkr.ecr.us-east-1.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag my-web-app:latest 730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest

    - name: Push Docker image to ECR
      run: |
        docker push 730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest

    - name: Update ECS service
      run: |
        ecs-cli configure --cluster ${{ secrets.ECS_CLUSTER_NAME }} --default-launch-type FARGATE --config-name your-config-name
        ecs-cli compose --file docker-compose.yml up
        aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment

    - name: Clean up Docker images (optional)
      run: |
        docker system prune -af
