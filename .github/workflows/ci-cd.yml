name: Deploy to ECS

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Build Docker image
      run: |
        docker build -t my-web-app .

    - name: Authenticate Docker to ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 730335620727.dkr.ecr.us-east-1.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag my-web-app:latest 730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest

    - name: Push Docker image to ECR
      run: |
        docker push 730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest

    - name: Verify or Create ECS Cluster
      run: |
        # Retry logic for creating the ECS cluster if it does not exist
        max_attempts=10
        attempt=1
        cluster_name=${{ secrets.ECS_CLUSTER_NAME }}
        region=us-east-1

        while true; do
          if aws ecs describe-clusters --clusters $cluster_name --region $region; then
            echo "Cluster $cluster_name already exists."
            break
          else
            if [ $attempt -lt $max_attempts ]; then
              echo "Cluster $cluster_name not found. Attempt $attempt/$max_attempts. Creating cluster..."
              aws ecs create-cluster --cluster-name $cluster_name --region $region
              sleep 30 # wait for 30 seconds before retrying
              attempt=$((attempt + 1))
            else
              echo "Failed to create cluster after $max_attempts attempts."
              exit 1
            fi
          fi
        done

    - name: Register ECS Task Definition
      run: |
        aws ecs register-task-definition \
          --family my-task-definition \
          --container-definitions '[
            {
              "name": "my-container",
              "image": "730335620727.dkr.ecr.us-east-1.amazonaws.com/my-web-app:latest",
              "memory": 512,
              "cpu": 256,
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80
                }
              ]
            }
          ]' \
          --region us-east-1

    - name: Create or Update ECS Service
      run: |
        # Retry logic for creating the ECS service if it does not exist
        max_attempts=10
        attempt=1
        cluster_name=${{ secrets.ECS_CLUSTER_NAME }}
        service_name=${{ secrets.ECS_SERVICE_NAME }}
        region=us-east-1

        while true; do
          if aws ecs describe-services --services $service_name --cluster $cluster_name --region $region; then
            echo "Service $service_name already exists."
            break
          else
            if [ $attempt -lt $max_attempts ]; then
              echo "Service $service_name not found. Attempt $attempt/$max_attempts. Creating service..."
              aws ecs create-service \
                --cluster $cluster_name \
                --service-name $service_name \
                --task-definition my-task-definition \
                --desired-count 1 \
                --launch-type FARGATE \
                --region $region
              sleep 30 # wait for 30 seconds before retrying
              attempt=$((attempt + 1))
            else
              echo "Failed to create service after $max_attempts attempts."
              exit 1
            fi
          fi
        done

        # Update the service to use the latest task definition
        aws ecs update-service \
          --cluster $cluster_name \
          --service $service_name \
          --force-new-deployment \
          --region $region

    - name: Clean up Docker images (optional)
      run: |
        docker system prune -af
